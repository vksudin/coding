#include<iostream>
#include<bits/stdc++.h>
using namespace std;


class node{
    public:
    int data;
    node* next;
    node(int val)
    {
        data=val;
        next=NULL;
    }
};

void delete_first(node* &head);

void insertAtTail(node* &head,int val)
{
    node* n=new node(val);
    node* temp=head;
    
    if(head==NULL)
    {
        head=n;
        return;
    }
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=n;
    
}

void insertAtBegin(node* &head,int val)
{
    node* n=new node(val);
    n->next=head;
    head=n;
}

void display(node* head)
{
    node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<"\n";
}

void makeCycle(node* &head,int pos)//for make cycle in linked list
{
    node* temp=head;
    node* start;
    int count=1;
    while(temp->next!=NULL)
    {
        if(count==pos)
        {
            start=temp;
        }
        temp=temp->next;
        count++;
    }
    temp->next=start;
}

bool isCycle(node* &head)//detect a cycle if there is a cycle in linked list or not
{
    node* fast=head;
    node* slow=head;
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
        if(fast==slow)
        {
            return true;
        }
    }
    return false;
}

void deletion(node* &head,int val)
{
    
    if(head==NULL)
    return;
    
    if(head->next==NULL)
    {
        delete_first(head);
        return;
    }
    
    
    node* temp=head;
    while(temp->next->data!=val)
    {
        temp=temp->next;
    }
 
   node* todelete=temp->next;
   temp->next=temp->next->next;
   delete todelete;
    
}

void removeCycle(node* &head)
{
    node* slow=head;
    node* fast=head;
    do{
        slow=slow->next;
        fast=fast->next->next;
    }while(slow!=fast);
    
    fast=head;
    
    while(slow->next!=fast->next)
    {
        slow=slow->next;
        fast=fast->next;
    }
    slow->next=NULL;
}

void delete_first(node* &head)
{
    node* to_delete=head;
    head=head->next;
    delete to_delete;
}

node* reverseRecursive(node* &head)
{
    if(head==NULL || head->next==NULL)
    {
        return head;
    }
    node* newhead=reverseRecursive(head->next);
    head->next->next=head;
    head->next=NULL;
    return newhead;
}

int main()
{
    node* head=NULL;
    insertAtTail(head,1);
    insertAtTail(head,2);
    insertAtTail(head,3);
    insertAtBegin(head,4);
    insertAtBegin(head,5);
    insertAtTail(head,6);
    makeCycle(head,2);
    if(isCycle(head))
    cout<<"YES"<<"\n";
    else
    cout<<"NO"<<"\n";
    
    removeCycle(head);
    if(isCycle(head))
    cout<<"YES"<<"\n";
    else
    cout<<"NO"<<"\n";
    
    
    display(head);
    //node* newhead=reverseRecursive(head);
    //display(newhead);
}
