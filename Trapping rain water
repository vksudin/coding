#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int max_water(int arr[],int n)////Time complexity O(N) Space complexity O(N) Array preprocessing not using stack
{
    int left[n],right[n],i;
    left[0]=arr[0];
    for(i=1;i<n;i++)
    {
        left[i]=max(left[i-1],arr[i]);
    }
    right[n-1]=arr[n-1];
    for(i=n-2;i>=0;i--)
    {
        right[i]=max(right[i+1],arr[i]);
    }
    int ans=0;
    right[n-1]=arr[n-1];
    for(i=0;i<n;i++)
    {
        ans=ans+min(left[i],right[i])-arr[i];
    }
    return ans;
}

int maxWater(int arr[],int n)/////Time complexity O(N^2) Space complexity O(1)
{
    int i,res=0,j;
    for(i=1;i<n-1;i++)
    {
        int left=arr[i];
        for(j=0;j<i;j++)
        {
            left=max(left,arr[j]);
        }
        int right=arr[i];
        for(j=i+1;j<n;j++)
        {
            right=max(right,arr[j]);
        }
        res=res+min(left,right)-arr[i];
    }
    return res;
}


int max_Water(int arr[],int n)//Time complexity O(N) and space complexity O(1)
{
    if(n<=2)
    return 0;
    int maxLeft=arr[0];
    int maxRight=arr[n-1];
    int left=1;
    int right=n-2;
    int ans=0;
    while(left<=right)
    {
        if(maxLeft<maxRight)
        {
            if(arr[left]>=maxLeft)
            maxLeft=arr[left];
            else
            {
                ans=ans+(maxLeft-arr[left]);
            }
            left+=1;
        }
        else
        {
            if(arr[right]>=maxRight)
            maxRight=arr[right];
            else
            {
                ans=ans+(maxRight-arr[right]);
            }
            right-=1;
        }
    }
    return ans;
}

int main()
{
    int n;
    cout<<"Enter the number of blocks:"<<"\n";
    cin>>n;
    int arr[n],i;
    cout<<"Enter the height:"<<"\n";
    for(i=0;i<n;i++)
    cin>>arr[i];
    cout<<max_Water(arr,n)<<"\n";
}
